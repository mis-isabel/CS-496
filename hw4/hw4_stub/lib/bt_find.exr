(* Find exercise  
Isabel Sutedjo and Sean Payba*)

let n_left = { data <= 12; left <= 0; right <= 0 } in
let n_right = { data <= 44; left <= 0; right <= 0 } in
let n_root = { data <= 33; left <= n_left; right <= n_right } in
let t1 = { root <= n_root; size <= 3 } in

letrec find_help (knode) = proc (need) {
  (if number?(knode)
   then zero?(1)
   else (
     if (knode.data = need)
     then zero?(0)
     else (
       if (knode.data << need)
       then ((find_help knode.right) need)
       else ((find_help knode.left) need))
   ))
} in

let find_bt = proc (t) { proc (elem) { ((find_help t.root) elem) } } in

((find_bt t1) 12)
